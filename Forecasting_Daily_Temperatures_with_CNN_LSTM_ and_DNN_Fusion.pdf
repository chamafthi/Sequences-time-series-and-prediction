{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 4: Using real world data\n",
    "\n",
    "Welcome! So far you have worked exclusively with generated data. This time you will be using the [Daily Minimum Temperatures in Melbourne](https://github.com/jbrownlee/Datasets/blob/master/daily-min-temperatures.csv) dataset which contains data of the daily minimum temperatures recorded in Melbourne from 1981 to 1990. In addition to be using Tensorflow's layers for processing sequence data such as Recurrent layers or LSTMs you will also use Convolutional layers to improve the model's performance.\n",
    "\n",
    "Let's get started!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "56XEQOGknrAk",
    "outputId": "6b8ab5ea-ed49-40d2-a27c-d2ba08710ba0"
   },
   "outputs": [],
   "source": [
    "import csv\n",
    "import pickle\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "from dataclasses import dataclass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Begin by looking at the structure of the csv that contains the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Header looks like this:\n",
      "\n",
      "\"Date\",\"Temp\"\n",
      "\n",
      "First data point looks like this:\n",
      "\n",
      "\"1981-01-01\",20.7\n",
      "\n",
      "Second data point looks like this:\n",
      "\n",
      "\"1981-01-02\",17.9\n",
      "\n"
     ]
    }
   ],
   "source": [
    "TEMPERATURES_CSV = './data/daily-min-temperatures.csv'\n",
    "\n",
    "with open(TEMPERATURES_CSV, 'r') as csvfile:\n",
    "    print(f\"Header looks like this:\\n\\n{csvfile.readline()}\")    \n",
    "    print(f\"First data point looks like this:\\n\\n{csvfile.readline()}\")\n",
    "    print(f\"Second data point looks like this:\\n\\n{csvfile.readline()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, each data point is composed of the date and the recorded minimum temperature for that date.\n",
    "\n",
    "\n",
    "In the first exercise you will code a function to read the data from the csv but for now run the next cell to load a helper function to plot the time series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "sLl52leVp5wU"
   },
   "outputs": [],
   "source": [
    "def plot_series(time, series, format=\"-\", start=0, end=None):\n",
    "    plt.plot(time[start:end], series[start:end], format)\n",
    "    plt.xlabel(\"Time\")\n",
    "    plt.ylabel(\"Value\")\n",
    "    plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parsing the raw data\n",
    "Now you need to read the data from the csv file. To do so, complete the `parse_data_from_file` function.\n",
    "\n",
    "A couple of things to note:\n",
    "\n",
    "- You should omit the first line as the file contains headers.\n",
    "- There is no need to save the data points as numpy arrays, regular lists is fine.\n",
    "- To read from csv files use `csv.reader` by passing the appropriate arguments.\n",
    "- `csv.reader` returns an iterable that returns each row in every iteration. So the temperature can be accessed via row[1] and the date can be discarded.\n",
    "- The `times` list should contain every timestep (starting at zero), which is just a sequence of ordered numbers with the same length as the `temperatures` list.\n",
    "- The values of the `temperatures` should be of `float` type. You can use Python's built-in `float` function to ensure this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 388
    },
    "id": "NcG9r1eClbTh",
    "outputId": "7acf6ba9-e852-4f06-e06e-b0ff1b9e2ddd"
   },
   "outputs": [],
   "source": [
    "def parse_data_from_file(filename):\n",
    "    \n",
    "    # Initialize lists\n",
    "    times = []\n",
    "    temperatures = []\n",
    "\n",
    "    # Open CSV file:\n",
    "    with open(filename) as csvfile:\n",
    "        \n",
    "        ### START CODE HERE\n",
    "        \n",
    "        # Initialize reader\n",
    "        reader = csv.reader(csvfile, delimiter = ',')\n",
    "        \n",
    "        # Skip the first line\n",
    "        next(reader)\n",
    "  \n",
    "        # Append \"Date\" and \"Temp\" (float) to lists:\n",
    "        for row in reader:\n",
    "            \n",
    "            times.append(row[0]) # timestamp\n",
    "            temperatures.append(float(row[1]))\n",
    "\n",
    "        ### END CODE HERE\n",
    "            \n",
    "    return times, temperatures\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next cell will use your function to compute the `times` and `temperatures` and will save these as numpy arrays within the `G` dataclass. This cell will also plot the time series:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Test your function and save all \"global\" variables within the G class (G stands for global)\n",
    "@dataclass\n",
    "class G:\n",
    "    TEMPERATURES_CSV = './data/daily-min-temperatures.csv'\n",
    "    times, temperatures = parse_data_from_file(TEMPERATURES_CSV)\n",
    "    TIME = np.array(times)\n",
    "    SERIES = np.array(temperatures)\n",
    "    SPLIT_TIME = 2500\n",
    "    WINDOW_SIZE = 64\n",
    "    BATCH_SIZE = 256\n",
    "    SHUFFLE_BUFFER_SIZE = 1000\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plot_series(G.TIME, G.SERIES)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output:**\n",
    "<div>\n",
    "<img src=\"images/temp-series.png\" width=\"500\"/>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Processing the data\n",
    "\n",
    "Since you already coded the `train_val_split` and `windowed_dataset` functions during past week's assignments, this time they are provided for you:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_val_split(time, series, time_step=G.SPLIT_TIME):\n",
    "\n",
    "    time_train = time[:time_step]\n",
    "    series_train = series[:time_step]\n",
    "    time_valid = time[time_step:]\n",
    "    series_valid = series[time_step:]\n",
    "\n",
    "    return time_train, series_train, time_valid, series_valid\n",
    "\n",
    "\n",
    "# Split the dataset\n",
    "time_train, series_train, time_valid, series_valid = train_val_split(G.TIME, G.SERIES)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "lJwUUZscnG38"
   },
   "outputs": [],
   "source": [
    "def windowed_dataset(series, window_size=G.WINDOW_SIZE, batch_size=G.BATCH_SIZE, shuffle_buffer=G.SHUFFLE_BUFFER_SIZE):\n",
    "    ds = tf.data.Dataset.from_tensor_slices(series)\n",
    "    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)\n",
    "    ds = ds.flat_map(lambda w: w.batch(window_size + 1))\n",
    "    ds = ds.shuffle(shuffle_buffer)\n",
    "    ds = ds.map(lambda w: (w[:-1], w[-1]))\n",
    "    ds = ds.batch(batch_size).prefetch(1)\n",
    "    return ds\n",
    "\n",
    "\n",
    "# Apply the transformation to the training set\n",
    "train_set = windowed_dataset(series_train, window_size=G.WINDOW_SIZE, batch_size=G.BATCH_SIZE, shuffle_buffer=G.SHUFFLE_BUFFER_SIZE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the model architecture\n",
    "\n",
    "Now that you have a function that will process the data before it is fed into your neural network for training, it is time to define your layer architecture. Just as in last week's assignment you will do the layer definition and compilation in two separate steps. Begin by completing the `create_uncompiled_model` function below.\n",
    "\n",
    "This is done so you can reuse your model's layers for the learning rate adjusting and the actual training.\n",
    "\n",
    "Hint:\n",
    "\n",
    "- `Lambda` layers are not required.\n",
    "- Use a combination of `Conv1D` and `LSTM` layers followed by `Dense` layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_uncompiled_model():\n",
    "\n",
    "    ### START CODE HERE\n",
    "    window_size = G.WINDOW_SIZE\n",
    "    \n",
    "    model = tf.keras.models.Sequential([\n",
    "        \n",
    "        tf.keras.layers.Conv1D(filters=64, kernel_size=3,\n",
    "                      strides=1,\n",
    "                      activation=\"relu\",\n",
    "                      padding='causal',\n",
    "                      input_shape=[window_size, 1]),\n",
    "        tf.keras.layers.LSTM(64, return_sequences=True),\n",
    "        tf.keras.layers.LSTM(64),\n",
    "        tf.keras.layers.Dense(30, activation=\"relu\"),\n",
    "        tf.keras.layers.Dense(10, activation=\"relu\"),\n",
    "        tf.keras.layers.Dense(1),\n",
    "        tf.keras.layers.Lambda(lambda x: x * 400)\n",
    "        \n",
    "    ]) \n",
    "    \n",
    "    ### END CODE HERE\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your current architecture is compatible with the windowed dataset! :)\n"
     ]
    }
   ],
   "source": [
    "# Test your uncompiled model\n",
    "uncompiled_model = create_uncompiled_model()\n",
    "\n",
    "try:\n",
    "    uncompiled_model.predict(train_set)\n",
    "except:\n",
    "    print(\"Your current architecture is incompatible with the windowed dataset, try adjusting it.\")\n",
    "else:\n",
    "    print(\"Your current architecture is compatible with the windowed dataset! :)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adjusting the learning rate - (Optional Exercise)\n",
    "\n",
    "As you saw in the lecture you can leverage Tensorflow's callbacks to dinamically vary the learning rate during training. This can be helpful to get a better sense of which learning rate better acommodates to the problem at hand.\n",
    "\n",
    "**Notice that this is only changing the learning rate during the training process to give you an idea of what a reasonable learning rate is and should not be confused with selecting the best learning rate, this is known as hyperparameter optimization and it is outside the scope of this course.**\n",
    "\n",
    "For the optimizers you can try out:\n",
    "\n",
    "- tf.keras.optimizers.Adam\n",
    "- tf.keras.optimizers.SGD with a momentum of 0.9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def adjust_learning_rate(dataset):\n",
    "    \n",
    "    model = create_uncompiled_model()\n",
    "    \n",
    "    lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-4 * 10**(epoch / 20))\n",
    "    \n",
    "    ### START CODE HERE\n",
    "    \n",
    "    # Select your optimizer\n",
    "    optimizer = 'adam'\n",
    "    \n",
    "    # Compile the model passing in the appropriate loss\n",
    "    model.compile(loss=tf.keras.losses.Huber(),\n",
    "                  optimizer=optimizer, \n",
    "                  metrics=[\"mae\"]) \n",
    "    \n",
    "    ### END CODE HERE\n",
    "    \n",
    "    history = model.fit(dataset, epochs=100, callbacks=[lr_schedule])\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "10/10 [==============================] - 6s 346ms/step - loss: 21.1290 - mae: 21.6252 - lr: 1.0000e-04\n",
      "Epoch 2/100\n",
      "10/10 [==============================] - 3s 333ms/step - loss: 8.1034 - mae: 8.5897 - lr: 1.1220e-04\n",
      "Epoch 3/100\n",
      "10/10 [==============================] - 4s 334ms/step - loss: 3.9210 - mae: 4.3965 - lr: 1.2589e-04\n",
      "Epoch 4/100\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 2.7198 - mae: 3.1880 - lr: 1.4125e-04\n",
      "Epoch 5/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.4069 - mae: 2.8697 - lr: 1.5849e-04\n",
      "Epoch 6/100\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 2.1327 - mae: 2.5865 - lr: 1.7783e-04\n",
      "Epoch 7/100\n",
      "10/10 [==============================] - 4s 334ms/step - loss: 2.0505 - mae: 2.5078 - lr: 1.9953e-04\n",
      "Epoch 8/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.0172 - mae: 2.4724 - lr: 2.2387e-04\n",
      "Epoch 9/100\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 1.8620 - mae: 2.3169 - lr: 2.5119e-04\n",
      "Epoch 10/100\n",
      "10/10 [==============================] - 3s 313ms/step - loss: 1.8665 - mae: 2.3201 - lr: 2.8184e-04\n",
      "Epoch 11/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 1.8083 - mae: 2.2602 - lr: 3.1623e-04\n",
      "Epoch 12/100\n",
      "10/10 [==============================] - 3s 311ms/step - loss: 1.9984 - mae: 2.4534 - lr: 3.5481e-04\n",
      "Epoch 13/100\n",
      "10/10 [==============================] - 3s 301ms/step - loss: 2.0093 - mae: 2.4672 - lr: 3.9811e-04\n",
      "Epoch 14/100\n",
      "10/10 [==============================] - 3s 311ms/step - loss: 2.3319 - mae: 2.7918 - lr: 4.4668e-04\n",
      "Epoch 15/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 1.9089 - mae: 2.3648 - lr: 5.0119e-04\n",
      "Epoch 16/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.6800 - mae: 3.1491 - lr: 5.6234e-04\n",
      "Epoch 17/100\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 2.7170 - mae: 3.1846 - lr: 6.3096e-04\n",
      "Epoch 18/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.3366 - mae: 2.7984 - lr: 7.0795e-04\n",
      "Epoch 19/100\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 2.9434 - mae: 3.4147 - lr: 7.9433e-04\n",
      "Epoch 20/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 3.4551 - mae: 3.9341 - lr: 8.9125e-04\n",
      "Epoch 21/100\n",
      "10/10 [==============================] - 3s 332ms/step - loss: 4.5378 - mae: 5.0177 - lr: 0.0010\n",
      "Epoch 22/100\n",
      "10/10 [==============================] - 3s 325ms/step - loss: 10.0928 - mae: 10.5841 - lr: 0.0011\n",
      "Epoch 23/100\n",
      "10/10 [==============================] - 4s 335ms/step - loss: 6.2508 - mae: 6.7381 - lr: 0.0013\n",
      "Epoch 24/100\n",
      "10/10 [==============================] - 4s 335ms/step - loss: 2.4379 - mae: 2.8997 - lr: 0.0014\n",
      "Epoch 25/100\n",
      "10/10 [==============================] - 3s 332ms/step - loss: 2.1106 - mae: 2.5713 - lr: 0.0016\n",
      "Epoch 26/100\n",
      "10/10 [==============================] - 3s 333ms/step - loss: 2.6391 - mae: 3.1044 - lr: 0.0018\n",
      "Epoch 27/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.4960 - mae: 2.9614 - lr: 0.0020\n",
      "Epoch 28/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.3766 - mae: 2.8402 - lr: 0.0022\n",
      "Epoch 29/100\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 2.1936 - mae: 2.6545 - lr: 0.0025\n",
      "Epoch 30/100\n",
      "10/10 [==============================] - 3s 332ms/step - loss: 1.7676 - mae: 2.2180 - lr: 0.0028\n",
      "Epoch 31/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 1.9490 - mae: 2.4016 - lr: 0.0032\n",
      "Epoch 32/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 2.6283 - mae: 3.0913 - lr: 0.0035\n",
      "Epoch 33/100\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 2.5635 - mae: 3.0298 - lr: 0.0040\n",
      "Epoch 34/100\n",
      "10/10 [==============================] - 3s 332ms/step - loss: 2.4842 - mae: 2.9503 - lr: 0.0045\n",
      "Epoch 35/100\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 2.5635 - mae: 3.0285 - lr: 0.0050\n",
      "Epoch 36/100\n",
      "10/10 [==============================] - 4s 334ms/step - loss: 2.3845 - mae: 2.8472 - lr: 0.0056\n",
      "Epoch 37/100\n",
      "10/10 [==============================] - 4s 354ms/step - loss: 2.0796 - mae: 2.5358 - lr: 0.0063\n",
      "Epoch 38/100\n",
      "10/10 [==============================] - 4s 344ms/step - loss: 2.0995 - mae: 2.5560 - lr: 0.0071\n",
      "Epoch 39/100\n",
      "10/10 [==============================] - 4s 336ms/step - loss: 4.7087 - mae: 5.1870 - lr: 0.0079\n",
      "Epoch 40/100\n",
      "10/10 [==============================] - 3s 325ms/step - loss: 5.9255 - mae: 6.4067 - lr: 0.0089\n",
      "Epoch 41/100\n",
      "10/10 [==============================] - 3s 332ms/step - loss: 3.6255 - mae: 4.0972 - lr: 0.0100\n",
      "Epoch 42/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 3.0878 - mae: 3.5604 - lr: 0.0112\n",
      "Epoch 43/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.7817 - mae: 3.2467 - lr: 0.0126\n",
      "Epoch 44/100\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 2.7435 - mae: 3.2099 - lr: 0.0141\n",
      "Epoch 45/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.7165 - mae: 3.1834 - lr: 0.0158\n",
      "Epoch 46/100\n",
      "10/10 [==============================] - 4s 333ms/step - loss: 2.7184 - mae: 3.1837 - lr: 0.0178\n",
      "Epoch 47/100\n",
      "10/10 [==============================] - 3s 333ms/step - loss: 2.7269 - mae: 3.1932 - lr: 0.0200\n",
      "Epoch 48/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.7530 - mae: 3.2184 - lr: 0.0224\n",
      "Epoch 49/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 2.7522 - mae: 3.2173 - lr: 0.0251\n",
      "Epoch 50/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 2.7456 - mae: 3.2134 - lr: 0.0282\n",
      "Epoch 51/100\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 2.8054 - mae: 3.2729 - lr: 0.0316\n",
      "Epoch 52/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.8140 - mae: 3.2829 - lr: 0.0355\n",
      "Epoch 53/100\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 2.7872 - mae: 3.2545 - lr: 0.0398\n",
      "Epoch 54/100\n",
      "10/10 [==============================] - 3s 334ms/step - loss: 2.7340 - mae: 3.2000 - lr: 0.0447\n",
      "Epoch 55/100\n",
      "10/10 [==============================] - 4s 331ms/step - loss: 2.7499 - mae: 3.2163 - lr: 0.0501\n",
      "Epoch 56/100\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 2.7475 - mae: 3.2132 - lr: 0.0562\n",
      "Epoch 57/100\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 2.8056 - mae: 3.2749 - lr: 0.0631\n",
      "Epoch 58/100\n",
      "10/10 [==============================] - 4s 332ms/step - loss: 2.7422 - mae: 3.2101 - lr: 0.0708\n",
      "Epoch 59/100\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 2.7722 - mae: 3.2422 - lr: 0.0794\n",
      "Epoch 60/100\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 2.7613 - mae: 3.2294 - lr: 0.0891\n",
      "Epoch 61/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.9057 - mae: 3.3744 - lr: 0.1000\n",
      "Epoch 62/100\n",
      "10/10 [==============================] - 3s 315ms/step - loss: 3.1877 - mae: 3.6589 - lr: 0.1122\n",
      "Epoch 63/100\n",
      "10/10 [==============================] - 3s 332ms/step - loss: 3.1453 - mae: 3.6156 - lr: 0.1259\n",
      "Epoch 64/100\n",
      "10/10 [==============================] - 3s 333ms/step - loss: 2.9446 - mae: 3.4146 - lr: 0.1413\n",
      "Epoch 65/100\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 3.0284 - mae: 3.4971 - lr: 0.1585\n",
      "Epoch 66/100\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 3.6851 - mae: 4.1603 - lr: 0.1778\n",
      "Epoch 67/100\n",
      "10/10 [==============================] - 4s 333ms/step - loss: 3.5740 - mae: 4.0502 - lr: 0.1995\n",
      "Epoch 68/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 3.3181 - mae: 3.7872 - lr: 0.2239\n",
      "Epoch 69/100\n",
      "10/10 [==============================] - 3s 314ms/step - loss: 4.0124 - mae: 4.4889 - lr: 0.2512\n",
      "Epoch 70/100\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 3.9963 - mae: 4.4766 - lr: 0.2818\n",
      "Epoch 71/100\n",
      "10/10 [==============================] - 4s 333ms/step - loss: 6.2776 - mae: 6.7685 - lr: 0.3162\n",
      "Epoch 72/100\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 6.7704 - mae: 7.2642 - lr: 0.3548\n",
      "Epoch 73/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 7.1482 - mae: 7.6374 - lr: 0.3981\n",
      "Epoch 74/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 14.2540 - mae: 14.7423 - lr: 0.4467\n",
      "Epoch 75/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 33.6789 - mae: 34.1748 - lr: 0.5012\n",
      "Epoch 76/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 11.4760 - mae: 11.9677 - lr: 0.5623\n",
      "Epoch 77/100\n",
      "10/10 [==============================] - 4s 332ms/step - loss: 43.0430 - mae: 43.5419 - lr: 0.6310\n",
      "Epoch 78/100\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 72.6721 - mae: 73.1686 - lr: 0.7079\n",
      "Epoch 79/100\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 29.2600 - mae: 29.7600 - lr: 0.7943\n",
      "Epoch 80/100\n",
      "10/10 [==============================] - 3s 310ms/step - loss: 30.0488 - mae: 30.5478 - lr: 0.8913\n",
      "Epoch 81/100\n",
      "10/10 [==============================] - 3s 303ms/step - loss: 36.4577 - mae: 36.9577 - lr: 1.0000\n",
      "Epoch 82/100\n",
      "10/10 [==============================] - 3s 313ms/step - loss: 41.4881 - mae: 41.9881 - lr: 1.1220\n",
      "Epoch 83/100\n",
      "10/10 [==============================] - 3s 301ms/step - loss: 41.4753 - mae: 41.9753 - lr: 1.2589\n",
      "Epoch 84/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 51.0904 - mae: 51.5904 - lr: 1.4125\n",
      "Epoch 85/100\n",
      "10/10 [==============================] - 3s 312ms/step - loss: 50.8173 - mae: 51.3173 - lr: 1.5849\n",
      "Epoch 86/100\n",
      "10/10 [==============================] - 3s 300ms/step - loss: 62.2494 - mae: 62.7494 - lr: 1.7783\n",
      "Epoch 87/100\n",
      "10/10 [==============================] - 3s 300ms/step - loss: 62.7876 - mae: 63.2876 - lr: 1.9953\n",
      "Epoch 88/100\n",
      "10/10 [==============================] - 3s 302ms/step - loss: 75.8563 - mae: 76.3563 - lr: 2.2387\n",
      "Epoch 89/100\n",
      "10/10 [==============================] - 3s 309ms/step - loss: 77.8833 - mae: 78.3833 - lr: 2.5119\n",
      "Epoch 90/100\n",
      "10/10 [==============================] - 3s 301ms/step - loss: 92.7915 - mae: 93.2915 - lr: 2.8184\n",
      "Epoch 91/100\n",
      "10/10 [==============================] - 3s 300ms/step - loss: 96.7065 - mae: 97.2065 - lr: 3.1623\n",
      "Epoch 92/100\n",
      "10/10 [==============================] - 3s 302ms/step - loss: 113.6232 - mae: 114.1232 - lr: 3.5481\n",
      "Epoch 93/100\n",
      "10/10 [==============================] - 3s 309ms/step - loss: 119.9850 - mae: 120.4850 - lr: 3.9811\n",
      "Epoch 94/100\n",
      "10/10 [==============================] - 3s 301ms/step - loss: 139.7142 - mae: 140.2142 - lr: 4.4668\n",
      "Epoch 95/100\n",
      "10/10 [==============================] - 3s 310ms/step - loss: 149.0733 - mae: 149.5733 - lr: 5.0119\n",
      "Epoch 96/100\n",
      "10/10 [==============================] - 3s 301ms/step - loss: 172.0090 - mae: 172.5090 - lr: 5.6234\n",
      "Epoch 97/100\n",
      "10/10 [==============================] - 3s 312ms/step - loss: 184.9793 - mae: 185.4793 - lr: 6.3096\n",
      "Epoch 98/100\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 212.3289 - mae: 212.8289 - lr: 7.0795\n",
      "Epoch 99/100\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 230.1132 - mae: 230.6132 - lr: 7.9433\n",
      "Epoch 100/100\n",
      "10/10 [==============================] - 4s 333ms/step - loss: 262.5392 - mae: 263.0392 - lr: 8.9125\n"
     ]
    }
   ],
   "source": [
    "# Run the training with dynamic LR\n",
    "lr_history = adjust_learning_rate(train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 290
    },
    "id": "vVcKmg7Q_7rD",
    "outputId": "27cf16ae-eb85-47c3-fc86-18e72e528619"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0001, 10.0, 0.0, 10.0)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.semilogx(lr_history.history[\"lr\"], lr_history.history[\"loss\"])\n",
    "plt.axis([1e-4, 10, 0, 10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "selected learning rate: 8e-3 (minimum plateau)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compiling the model\n",
    "Now that you have trained the model while varying the learning rate, it is time to do the actual training that will be used to forecast the time series. For this complete the `create_model` function below.\n",
    "\n",
    "Notice that you are reusing the architecture you defined in the `create_uncompiled_model` earlier. Now you only need to compile this model using the appropriate loss, optimizer (and learning rate).\n",
    "\n",
    "Hints:\n",
    "\n",
    "- The training should be really quick so if you notice that each epoch is taking more than a few seconds, consider trying a different architecture.\n",
    "\n",
    "\n",
    "- If after the first epoch you get an output like this: loss: nan - mae: nan it is very likely that your network is suffering from exploding gradients. This is a common problem if you used SGD as optimizer and set a learning rate that is too high. If you encounter this problem consider lowering the learning rate or using Adam with the default learning rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model():\n",
    "\n",
    "    \n",
    "    model = create_uncompiled_model()\n",
    "\n",
    "    ### START CODE HERE\n",
    "    \n",
    "    learning_rate = 8e-3\n",
    "    optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n",
    "    \n",
    "    model.compile(loss=tf.keras.losses.Huber(),\n",
    "                  optimizer=optimizer, \n",
    "                  metrics=[\"mae\"])  \n",
    "    \n",
    "\n",
    "    ### END CODE HERE\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "10/10 [==============================] - 6s 333ms/step - loss: 81.6572 - mae: 82.1565\n",
      "Epoch 2/50\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 23.9143 - mae: 24.4100\n",
      "Epoch 3/50\n",
      "10/10 [==============================] - 3s 312ms/step - loss: 8.6058 - mae: 9.0992\n",
      "Epoch 4/50\n",
      "10/10 [==============================] - 3s 304ms/step - loss: 5.0507 - mae: 5.5354\n",
      "Epoch 5/50\n",
      "10/10 [==============================] - 3s 313ms/step - loss: 3.2904 - mae: 3.7613\n",
      "Epoch 6/50\n",
      "10/10 [==============================] - 3s 314ms/step - loss: 2.8708 - mae: 3.3414\n",
      "Epoch 7/50\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 2.6552 - mae: 3.1246\n",
      "Epoch 8/50\n",
      "10/10 [==============================] - 3s 331ms/step - loss: 2.1418 - mae: 2.6000\n",
      "Epoch 9/50\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 1.8723 - mae: 2.3265\n",
      "Epoch 10/50\n",
      "10/10 [==============================] - 3s 313ms/step - loss: 1.6115 - mae: 2.0590\n",
      "Epoch 11/50\n",
      "10/10 [==============================] - 3s 304ms/step - loss: 1.5176 - mae: 1.9609\n",
      "Epoch 12/50\n",
      "10/10 [==============================] - 3s 312ms/step - loss: 1.5564 - mae: 2.0007\n",
      "Epoch 13/50\n",
      "10/10 [==============================] - 3s 320ms/step - loss: 1.5763 - mae: 2.0241\n",
      "Epoch 14/50\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 1.7064 - mae: 2.1553\n",
      "Epoch 15/50\n",
      "10/10 [==============================] - 3s 312ms/step - loss: 1.6976 - mae: 2.1494\n",
      "Epoch 16/50\n",
      "10/10 [==============================] - 3s 312ms/step - loss: 1.7485 - mae: 2.1982\n",
      "Epoch 17/50\n",
      "10/10 [==============================] - 3s 312ms/step - loss: 1.5186 - mae: 1.9587\n",
      "Epoch 18/50\n",
      "10/10 [==============================] - 3s 313ms/step - loss: 1.4916 - mae: 1.9307\n",
      "Epoch 19/50\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 1.6095 - mae: 2.0561\n",
      "Epoch 20/50\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 1.7862 - mae: 2.2392\n",
      "Epoch 21/50\n",
      "10/10 [==============================] - ETA: 0s - loss: 1.5658 - mae: 2.012 - 3s 312ms/step - loss: 1.5658 - mae: 2.0126\n",
      "Epoch 22/50\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 1.6809 - mae: 2.1317\n",
      "Epoch 23/50\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 1.6381 - mae: 2.0896\n",
      "Epoch 24/50\n",
      "10/10 [==============================] - 3s 334ms/step - loss: 2.0723 - mae: 2.5295\n",
      "Epoch 25/50\n",
      "10/10 [==============================] - 3s 303ms/step - loss: 2.2446 - mae: 2.7103\n",
      "Epoch 26/50\n",
      "10/10 [==============================] - 3s 311ms/step - loss: 1.8179 - mae: 2.2726\n",
      "Epoch 27/50\n",
      "10/10 [==============================] - 3s 313ms/step - loss: 1.6901 - mae: 2.1383\n",
      "Epoch 28/50\n",
      "10/10 [==============================] - 3s 311ms/step - loss: 1.5295 - mae: 1.9745\n",
      "Epoch 29/50\n",
      "10/10 [==============================] - 3s 311ms/step - loss: 1.5496 - mae: 1.9943\n",
      "Epoch 30/50\n",
      "10/10 [==============================] - 3s 320ms/step - loss: 1.6846 - mae: 2.1364\n",
      "Epoch 31/50\n",
      "10/10 [==============================] - 3s 322ms/step - loss: 1.5579 - mae: 2.0002\n",
      "Epoch 32/50\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 1.6373 - mae: 2.0855\n",
      "Epoch 33/50\n",
      "10/10 [==============================] - 3s 323ms/step - loss: 1.5495 - mae: 1.9947\n",
      "Epoch 34/50\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 1.5273 - mae: 1.9724\n",
      "Epoch 35/50\n",
      "10/10 [==============================] - 4s 342ms/step - loss: 1.5018 - mae: 1.9422\n",
      "Epoch 36/50\n",
      "10/10 [==============================] - 4s 346ms/step - loss: 1.4640 - mae: 1.9018\n",
      "Epoch 37/50\n",
      "10/10 [==============================] - 4s 334ms/step - loss: 1.4655 - mae: 1.9050\n",
      "Epoch 38/50\n",
      "10/10 [==============================] - 4s 325ms/step - loss: 1.4741 - mae: 1.9130\n",
      "Epoch 39/50\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 1.5113 - mae: 1.9542\n",
      "Epoch 40/50\n",
      "10/10 [==============================] - 4s 343ms/step - loss: 1.5095 - mae: 1.9517\n",
      "Epoch 41/50\n",
      "10/10 [==============================] - 3s 325ms/step - loss: 1.4887 - mae: 1.9276\n",
      "Epoch 42/50\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 1.4640 - mae: 1.9015\n",
      "Epoch 43/50\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 1.5479 - mae: 1.9894\n",
      "Epoch 44/50\n",
      "10/10 [==============================] - 4s 333ms/step - loss: 1.5428 - mae: 1.9865\n",
      "Epoch 45/50\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 1.4959 - mae: 1.9359\n",
      "Epoch 46/50\n",
      "10/10 [==============================] - 3s 321ms/step - loss: 1.4827 - mae: 1.9227\n",
      "Epoch 47/50\n",
      "10/10 [==============================] - 4s 335ms/step - loss: 1.5808 - mae: 2.0246\n",
      "Epoch 48/50\n",
      "10/10 [==============================] - 4s 333ms/step - loss: 1.5015 - mae: 1.9410\n",
      "Epoch 49/50\n",
      "10/10 [==============================] - 3s 324ms/step - loss: 1.4784 - mae: 1.9188\n",
      "Epoch 50/50\n",
      "10/10 [==============================] - 4s 334ms/step - loss: 1.5069 - mae: 1.9491\n"
     ]
    }
   ],
   "source": [
    "# Save an instance of the model\n",
    "model = create_model()\n",
    "\n",
    "# Train it\n",
    "history = model.fit(train_set, epochs=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluating the forecast\n",
    "\n",
    "Now it is time to evaluate the performance of the forecast. For this you can use the `compute_metrics` function that you coded in a previous assignment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_metrics(true_series, forecast):\n",
    "    \n",
    "    mse = tf.keras.metrics.mean_squared_error(true_series, forecast).numpy()\n",
    "    mae = tf.keras.metrics.mean_absolute_error(true_series, forecast).numpy()\n",
    "\n",
    "    return mse, mae"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this point only the model that will perform the forecast is ready but you still need to compute the actual forecast.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Faster model forecasts\n",
    "\n",
    "In the previous week you saw a faster approach compared to using a for loop to compute the forecasts for every point in the sequence. Remember that this faster approach uses batches of data. \n",
    "\n",
    "The code to implement this is provided in the `model_forecast` below. Notice that the code is very similar to the one in the `windowed_dataset` function with the differences that:\n",
    "- The dataset is windowed using `window_size` rather than `window_size + 1`\n",
    "- No shuffle should be used\n",
    "- No need to split the data into features and labels\n",
    "- A model is used to predict batches of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "4XwGrf-A_wF0"
   },
   "outputs": [],
   "source": [
    "def model_forecast(model, series, window_size):\n",
    "    ds = tf.data.Dataset.from_tensor_slices(series)\n",
    "    ds = ds.window(window_size, shift=1, drop_remainder=True)\n",
    "    ds = ds.flat_map(lambda w: w.batch(window_size))\n",
    "    ds = ds.batch(32).prefetch(1)\n",
    "    forecast = model.predict(ds)\n",
    "    return forecast"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now compute the actual forecast:\n",
    "\n",
    "**Note:** Don't modify the cell below. \n",
    "\n",
    "The grader uses the same slicing to get the forecast so if you change the cell below you risk having issues when submitting your model for grading."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 389
    },
    "id": "PrktQX3hKYex",
    "outputId": "1914662d-6bdd-4e17-8697-8f5a29e89b87"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute the forecast for all the series\n",
    "rnn_forecast = model_forecast(model, G.SERIES, G.WINDOW_SIZE).squeeze()\n",
    "\n",
    "# Slice the forecast to get only the predictions for the validation set\n",
    "rnn_forecast = rnn_forecast[G.SPLIT_TIME - G.WINDOW_SIZE:-1]\n",
    "\n",
    "# Plot the forecast\n",
    "plt.figure(figsize=(10, 6))\n",
    "plot_series(time_valid, series_valid)\n",
    "plot_series(time_valid, rnn_forecast)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse: 5.24, mae: 1.79 for forecast\n"
     ]
    }
   ],
   "source": [
    "mse, mae = compute_metrics(series_valid, rnn_forecast)\n",
    "\n",
    "print(f\"mse: {mse:.2f}, mae: {mae:.2f} for forecast\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**To pass this assignment your forecast should achieve a MSE of 6 or less and a MAE of 2 or less.**\n",
    "\n",
    "- If your forecast didn't achieve this threshold try re-training your model with a different architecture (you will need to re-run both `create_uncompiled_model` and `create_model` functions) or tweaking the optimizer's parameters.\n",
    "\n",
    "\n",
    "- If your forecast did achieve this threshold run the following cell to save the model in a HDF5 file which will be used for grading and after doing so, submit your assigment for grading.\n",
    "\n",
    "\n",
    "- This environment includes a dummy SavedModel directory which contains a dummy model trained for one epoch. **To replace this file with your actual model you need to run the next cell before submitting for grading.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Found untraced functions such as lstm_cell_4_layer_call_fn, lstm_cell_4_layer_call_and_return_conditional_losses, lstm_cell_5_layer_call_fn, lstm_cell_5_layer_call_and_return_conditional_losses, lstm_cell_4_layer_call_fn while saving (showing 5 of 10). These functions will not be directly callable after loading.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: saved_model/my_model/assets\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: saved_model/my_model/assets\n",
      "WARNING:absl:<keras.layers.recurrent.LSTMCell object at 0x7f69781ab250> has the same name 'LSTMCell' as a built-in Keras object. Consider renaming <class 'keras.layers.recurrent.LSTMCell'> to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n",
      "WARNING:absl:<keras.layers.recurrent.LSTMCell object at 0x7f69781abac0> has the same name 'LSTMCell' as a built-in Keras object. Consider renaming <class 'keras.layers.recurrent.LSTMCell'> to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saved_model/\n",
      "saved_model/my_model/\n",
      "saved_model/my_model/keras_metadata.pb\n",
      "saved_model/my_model/variables/\n",
      "saved_model/my_model/variables/variables.data-00000-of-00001\n",
      "saved_model/my_model/variables/variables.index\n",
      "saved_model/my_model/saved_model.pb\n",
      "saved_model/my_model/assets/\n"
     ]
    }
   ],
   "source": [
    "# Save your model in the SavedModel format\n",
    "model.save('saved_model/my_model')\n",
    "\n",
    "# Compress the directory using tar\n",
    "! tar -czvf saved_model.tar.gz saved_model/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Congratulations on finishing this week's assignment!**\n",
    "\n",
    "You have successfully implemented a neural network capable of forecasting time series leveraging a combination of Tensorflow's layers such as Convolutional and LSTMs! This resulted in a forecast that surpasses all the ones you did previously.\n",
    "\n",
    "**By finishing this assignment you have finished the specialization! Give yourself a pat on the back!!!**"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
