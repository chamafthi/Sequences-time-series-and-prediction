{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 2: Predicting time series\n",
    "\n",
    "Welcome! In the previous assignment you got some exposure to working with time series data, but you didn't use machine learning techniques for your forecasts. This week you will be using a deep neural network to create forecasts to see how this technique compares with the ones you already tried out. Once again all of the data is going to be generated.\n",
    "\n",
    "Let's get started!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_**NOTE:** To prevent errors from the autograder, you are not allowed to edit or delete some of the cells in this notebook . Please only put your solutions in between the `### START CODE HERE` and `### END CODE HERE` code comments, and also refrain from adding any new cells. **Once you have passed this assignment** and want to experiment with any of the locked cells, you may follow the instructions at the bottom of this notebook._"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "deletable": false,
    "editable": false,
    "id": "BOjujz601HcS",
    "outputId": "21a00a04-e660-4eb1-dc6f-8ad3741dee5a"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "from dataclasses import dataclass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating the data\n",
    "\n",
    "\n",
    "The next cell includes a bunch of helper functions to generate and plot the time series:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "def plot_series(time, series, format=\"-\", start=0, end=None):\n",
    "    plt.plot(time[start:end], series[start:end], format)\n",
    "    plt.xlabel(\"Time\")\n",
    "    plt.ylabel(\"Value\")\n",
    "    plt.grid(False)\n",
    "\n",
    "def trend(time, slope=0):\n",
    "    return slope * time\n",
    "\n",
    "def seasonal_pattern(season_time):\n",
    "    \"\"\"An arbitrary pattern\"\"\"\n",
    "    return np.where(season_time < 0.1,\n",
    "                    np.cos(season_time * 6 * np.pi), \n",
    "                    2 / np.exp(9 * season_time))\n",
    "\n",
    "def seasonality(time, period, amplitude=1, phase=0):\n",
    "    \"\"\"Repeats the same pattern at each period\"\"\"\n",
    "    season_time = ((time + phase) % period) / period\n",
    "    return amplitude * seasonal_pattern(season_time)\n",
    "\n",
    "def noise(time, noise_level=1, seed=None):\n",
    "    rnd = np.random.RandomState(seed)\n",
    "    return rnd.randn(len(time)) * noise_level"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will be generating time series data that greatly resembles the one from last week but with some differences.\n",
    "\n",
    "**Notice that this time all the generation is done within a function and global variables are saved within a dataclass. This is done to avoid using global scope as it was done in during the previous week.**\n",
    "\n",
    "If you haven't used dataclasses before, they are just Python classes that provide a convenient syntax for storing data. You can read more about them in the [docs](https://docs.python.org/3/library/dataclasses.html). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def generate_time_series():\n",
    "    # The time dimension or the x-coordinate of the time series\n",
    "    time = np.arange(4 * 365 + 1, dtype=\"float32\")\n",
    "\n",
    "    # Initial series is just a straight line with a y-intercept\n",
    "    y_intercept = 10\n",
    "    slope = 0.005\n",
    "    series = trend(time, slope) + y_intercept\n",
    "\n",
    "    # Adding seasonality\n",
    "    amplitude = 50\n",
    "    series += seasonality(time, period=365, amplitude=amplitude)\n",
    "\n",
    "    # Adding some noise\n",
    "    noise_level = 3\n",
    "    series += noise(time, noise_level, seed=51)\n",
    "    \n",
    "    return time, series\n",
    "\n",
    "\n",
    "# Save all \"global\" variables within the G class (G stands for global)\n",
    "@dataclass\n",
    "class G:\n",
    "    TIME, SERIES = generate_time_series()\n",
    "    SPLIT_TIME = 1100\n",
    "    WINDOW_SIZE = 20\n",
    "    BATCH_SIZE = 32\n",
    "    SHUFFLE_BUFFER_SIZE = 1000\n",
    "    \n",
    "\n",
    "# Plot the generated series\n",
    "plt.figure(figsize=(10, 6))\n",
    "plot_series(G.TIME, G.SERIES)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Splitting the data\n",
    "\n",
    "Since you already coded the `train_val_split` function during last week's assignment, this time it is provided for you:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 645
    },
    "deletable": false,
    "editable": false,
    "id": "Zswl7jRtGzkk",
    "outputId": "acfe857a-4a0f-4d41-bd45-1df7fa26f4d0"
   },
   "outputs": [],
   "source": [
    "def train_val_split(time, series, time_step=G.SPLIT_TIME):\n",
    "\n",
    "    time_train = time[:time_step]\n",
    "    series_train = series[:time_step]\n",
    "    time_valid = time[time_step:]\n",
    "    series_valid = series[time_step:]\n",
    "\n",
    "    return time_train, series_train, time_valid, series_valid\n",
    "\n",
    "\n",
    "# Split the dataset\n",
    "time_train, series_train, time_valid, series_valid = train_val_split(G.TIME, G.SERIES)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Processing the data\n",
    "\n",
    "As you saw on the lectures you can feed the data for training by creating a dataset with the appropiate processing steps such as `windowing`, `flattening`, `batching` and `shuffling`. To do so complete the `windowed_dataset` function below.\n",
    "\n",
    "Notice that this function receives a `series`, `window_size`, `batch_size` and `shuffle_buffer` and the last three of these default to the \"global\" values defined earlier.\n",
    "\n",
    "Be sure to check out the [docs](https://www.tensorflow.org/api_docs/python/tf/data/Dataset) about `TF Datasets` if you need any help."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "id": "4sTTIOCbyShY"
   },
   "outputs": [],
   "source": [
    "def windowed_dataset(series, window_size=G.WINDOW_SIZE, batch_size=G.BATCH_SIZE, shuffle_buffer=G.SHUFFLE_BUFFER_SIZE):\n",
    "    \n",
    "    ### START CODE HERE\n",
    "    \n",
    "    # Create dataset from the series\n",
    "    dataset = tf.data.Dataset.from_tensor_slices(series)\n",
    "    \n",
    "    # Slice the dataset into the appropriate windows\n",
    "    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)\n",
    "    \n",
    "    # Flatten the dataset\n",
    "    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))\n",
    "    \n",
    "    # Shuffle it\n",
    "    dataset = dataset.shuffle(shuffle_buffer)\n",
    "    \n",
    "    # Split it into the features and labels\n",
    "    dataset = dataset.map(lambda window: (window[:-1], window[-1]))\n",
    "    \n",
    "    # Batch it\n",
    "    dataset = dataset.batch(batch_size).prefetch(1)\n",
    "    \n",
    "    ### END CODE HERE\n",
    "    \n",
    "    return dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To test your function you will be using a `window_size` of 1 which means that you will use each value to predict the next one. This for 5 elements since a `batch_size` of 5 is used and no shuffle since `shuffle_buffer` is set to 1.\n",
    "\n",
    "Given this, the batch of features should be identical to the first 5 elements of the `series_train` and the batch of labels should be equal to elements 2 through 6 of the `series_train`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "batch_of_features has type: <class 'tensorflow.python.framework.ops.EagerTensor'>\n",
      "\n",
      "batch_of_labels has type: <class 'tensorflow.python.framework.ops.EagerTensor'>\n",
      "\n",
      "batch_of_features has shape: (5, 1)\n",
      "\n",
      "batch_of_labels has shape: (5,)\n",
      "\n",
      "batch_of_features is equal to first five elements in the series: True\n",
      "\n",
      "batch_of_labels is equal to first five labels: True\n"
     ]
    }
   ],
   "source": [
    "# Test your function with windows size of 1 and no shuffling\n",
    "test_dataset = windowed_dataset(series_train, window_size=1, batch_size=5, shuffle_buffer=1)\n",
    "\n",
    "# Get the first batch of the test dataset\n",
    "batch_of_features, batch_of_labels = next((iter(test_dataset)))\n",
    "\n",
    "print(f\"batch_of_features has type: {type(batch_of_features)}\\n\")\n",
    "print(f\"batch_of_labels has type: {type(batch_of_labels)}\\n\")\n",
    "print(f\"batch_of_features has shape: {batch_of_features.shape}\\n\")\n",
    "print(f\"batch_of_labels has shape: {batch_of_labels.shape}\\n\")\n",
    "print(f\"batch_of_features is equal to first five elements in the series: {np.allclose(batch_of_features.numpy().flatten(), series_train[:5])}\\n\")\n",
    "print(f\"batch_of_labels is equal to first five labels: {np.allclose(batch_of_labels.numpy(), series_train[1:6])}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output:**\n",
    "\n",
    "```\n",
    "batch_of_features has type: <class 'tensorflow.python.framework.ops.EagerTensor'>\n",
    "\n",
    "batch_of_labels has type: <class 'tensorflow.python.framework.ops.EagerTensor'>\n",
    "\n",
    "batch_of_features has shape: (5, 1)\n",
    "\n",
    "batch_of_labels has shape: (5,)\n",
    "\n",
    "batch_of_features is equal to first five elements in the series: True\n",
    "\n",
    "batch_of_labels is equal to first five labels: True\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the model architecture\n",
    "\n",
    "Now that you have a function that will process the data before it is fed into your neural network for training, it is time to define you layer architecture.\n",
    "\n",
    "Complete the `create_model` function below. Notice that this function receives the `window_size` since this will be an important parameter for the first layer of your network.\n",
    "\n",
    "Hint:\n",
    "- You will only need `Dense` layers.\n",
    "- Do not include `Lambda` layers. These are not required and are incompatible with the `HDF5` format which will be used to save your model for grading.\n",
    "- The training should be really quick so if you notice that each epoch is taking more than a few seconds, consider trying a different architecture."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "deletable": false,
    "id": "TW-vT7eLYAdb",
    "outputId": "94611183-4107-4062-cefd-c79d902d4e2f"
   },
   "outputs": [],
   "source": [
    "def create_model(window_size=G.WINDOW_SIZE):\n",
    "\n",
    "    ### START CODE HERE\n",
    "\n",
    "    model = tf.keras.models.Sequential([\n",
    "        tf.keras.layers.Dense(10, input_shape=[window_size], activation=\"relu\"), \n",
    "        tf.keras.layers.Dense(10, activation=\"relu\"), \n",
    "        tf.keras.layers.Dense(1)\n",
    "    ])\n",
    "    \n",
    "    \n",
    "    # Initialize the optimizer (stochastic gradient descent, SGD)\n",
    "    optimizer = tf.keras.optimizers.SGD(learning_rate=5e-5, momentum=0.9)\n",
    "\n",
    "    model.compile(loss=\"mse\",\n",
    "                  optimizer=optimizer)\n",
    "    \n",
    "    \n",
    "    ### END CODE HERE\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "deletable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "34/34 [==============================] - 1s 9ms/step - loss: 93.1843\n",
      "Epoch 2/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 37.7372\n",
      "Epoch 3/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 34.6060\n",
      "Epoch 4/100\n",
      "34/34 [==============================] - 0s 922us/step - loss: 29.5988\n",
      "Epoch 5/100\n",
      "34/34 [==============================] - 0s 962us/step - loss: 30.4527\n",
      "Epoch 6/100\n",
      "34/34 [==============================] - 0s 969us/step - loss: 28.1609\n",
      "Epoch 7/100\n",
      "34/34 [==============================] - 0s 996us/step - loss: 29.6427\n",
      "Epoch 8/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 27.8646\n",
      "Epoch 9/100\n",
      "34/34 [==============================] - 0s 911us/step - loss: 27.4920\n",
      "Epoch 10/100\n",
      "34/34 [==============================] - 0s 919us/step - loss: 27.3808\n",
      "Epoch 11/100\n",
      "34/34 [==============================] - 0s 902us/step - loss: 26.9026\n",
      "Epoch 12/100\n",
      "34/34 [==============================] - 0s 853us/step - loss: 26.0893\n",
      "Epoch 13/100\n",
      "34/34 [==============================] - 0s 971us/step - loss: 25.7341\n",
      "Epoch 14/100\n",
      "34/34 [==============================] - 0s 879us/step - loss: 25.5956\n",
      "Epoch 15/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 28.0099\n",
      "Epoch 16/100\n",
      "34/34 [==============================] - 0s 912us/step - loss: 29.5052\n",
      "Epoch 17/100\n",
      "34/34 [==============================] - 0s 864us/step - loss: 26.3452\n",
      "Epoch 18/100\n",
      "34/34 [==============================] - 0s 868us/step - loss: 25.4258\n",
      "Epoch 19/100\n",
      "34/34 [==============================] - 0s 985us/step - loss: 25.3487\n",
      "Epoch 20/100\n",
      "34/34 [==============================] - 0s 945us/step - loss: 25.3271\n",
      "Epoch 21/100\n",
      "34/34 [==============================] - 0s 924us/step - loss: 28.9674\n",
      "Epoch 22/100\n",
      "34/34 [==============================] - 0s 982us/step - loss: 24.6113\n",
      "Epoch 23/100\n",
      "34/34 [==============================] - 0s 846us/step - loss: 24.6092\n",
      "Epoch 24/100\n",
      "34/34 [==============================] - 0s 955us/step - loss: 24.1186\n",
      "Epoch 25/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 24.2373\n",
      "Epoch 26/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 24.3802\n",
      "Epoch 27/100\n",
      "34/34 [==============================] - 0s 901us/step - loss: 23.6333\n",
      "Epoch 28/100\n",
      "34/34 [==============================] - 0s 935us/step - loss: 24.3486\n",
      "Epoch 29/100\n",
      "34/34 [==============================] - 0s 958us/step - loss: 24.0855\n",
      "Epoch 30/100\n",
      "34/34 [==============================] - 0s 946us/step - loss: 23.9609\n",
      "Epoch 31/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 25.7204\n",
      "Epoch 32/100\n",
      "34/34 [==============================] - 0s 881us/step - loss: 23.1953\n",
      "Epoch 33/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 23.4547\n",
      "Epoch 34/100\n",
      "34/34 [==============================] - 0s 891us/step - loss: 24.0568\n",
      "Epoch 35/100\n",
      "34/34 [==============================] - 0s 957us/step - loss: 23.3938\n",
      "Epoch 36/100\n",
      "34/34 [==============================] - 0s 863us/step - loss: 23.5225\n",
      "Epoch 37/100\n",
      "34/34 [==============================] - 0s 822us/step - loss: 24.0719\n",
      "Epoch 38/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 24.2604\n",
      "Epoch 39/100\n",
      "34/34 [==============================] - 0s 983us/step - loss: 23.2598\n",
      "Epoch 40/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 23.3044\n",
      "Epoch 41/100\n",
      "34/34 [==============================] - 0s 862us/step - loss: 23.1696\n",
      "Epoch 42/100\n",
      "34/34 [==============================] - 0s 909us/step - loss: 23.5830\n",
      "Epoch 43/100\n",
      "34/34 [==============================] - 0s 920us/step - loss: 25.3893\n",
      "Epoch 44/100\n",
      "34/34 [==============================] - 0s 952us/step - loss: 22.8970\n",
      "Epoch 45/100\n",
      "34/34 [==============================] - 0s 982us/step - loss: 23.1181\n",
      "Epoch 46/100\n",
      "34/34 [==============================] - 0s 985us/step - loss: 22.1812\n",
      "Epoch 47/100\n",
      "34/34 [==============================] - 0s 916us/step - loss: 22.9950\n",
      "Epoch 48/100\n",
      "34/34 [==============================] - 0s 933us/step - loss: 21.4247\n",
      "Epoch 49/100\n",
      "34/34 [==============================] - 0s 939us/step - loss: 25.5719\n",
      "Epoch 50/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 22.8830\n",
      "Epoch 51/100\n",
      "34/34 [==============================] - 0s 975us/step - loss: 21.2046\n",
      "Epoch 52/100\n",
      "34/34 [==============================] - 0s 914us/step - loss: 21.6163\n",
      "Epoch 53/100\n",
      "34/34 [==============================] - 0s 890us/step - loss: 23.1145\n",
      "Epoch 54/100\n",
      "34/34 [==============================] - 0s 971us/step - loss: 23.7090\n",
      "Epoch 55/100\n",
      "34/34 [==============================] - 0s 838us/step - loss: 21.6544\n",
      "Epoch 56/100\n",
      "34/34 [==============================] - 0s 944us/step - loss: 21.2190\n",
      "Epoch 57/100\n",
      "34/34 [==============================] - 0s 960us/step - loss: 20.4918\n",
      "Epoch 58/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 23.2506\n",
      "Epoch 59/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 20.1204\n",
      "Epoch 60/100\n",
      "34/34 [==============================] - 0s 994us/step - loss: 23.9447\n",
      "Epoch 61/100\n",
      "34/34 [==============================] - 0s 854us/step - loss: 21.8204\n",
      "Epoch 62/100\n",
      "34/34 [==============================] - 0s 841us/step - loss: 20.3622\n",
      "Epoch 63/100\n",
      "34/34 [==============================] - 0s 915us/step - loss: 21.2787\n",
      "Epoch 64/100\n",
      "34/34 [==============================] - 0s 918us/step - loss: 21.1780\n",
      "Epoch 65/100\n",
      "34/34 [==============================] - 0s 880us/step - loss: 20.7215\n",
      "Epoch 66/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 24.4834\n",
      "Epoch 67/100\n",
      "34/34 [==============================] - 0s 905us/step - loss: 21.8208\n",
      "Epoch 68/100\n",
      "34/34 [==============================] - 0s 964us/step - loss: 20.5060\n",
      "Epoch 69/100\n",
      "34/34 [==============================] - 0s 826us/step - loss: 21.8986\n",
      "Epoch 70/100\n",
      "34/34 [==============================] - 0s 897us/step - loss: 21.2431\n",
      "Epoch 71/100\n",
      "34/34 [==============================] - 0s 954us/step - loss: 19.5697\n",
      "Epoch 72/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 24.7586\n",
      "Epoch 73/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 21.0509\n",
      "Epoch 74/100\n",
      "34/34 [==============================] - 0s 915us/step - loss: 19.7200\n",
      "Epoch 75/100\n",
      "34/34 [==============================] - 0s 893us/step - loss: 21.7163\n",
      "Epoch 76/100\n",
      "34/34 [==============================] - 0s 912us/step - loss: 20.7915\n",
      "Epoch 77/100\n",
      "34/34 [==============================] - 0s 914us/step - loss: 22.6050\n",
      "Epoch 78/100\n",
      "34/34 [==============================] - 0s 994us/step - loss: 21.4006\n",
      "Epoch 79/100\n",
      "34/34 [==============================] - 0s 986us/step - loss: 20.2245\n",
      "Epoch 80/100\n",
      "34/34 [==============================] - 0s 859us/step - loss: 20.7221\n",
      "Epoch 81/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 20.1556\n",
      "Epoch 82/100\n",
      "34/34 [==============================] - 0s 953us/step - loss: 21.5666\n",
      "Epoch 83/100\n",
      "34/34 [==============================] - 0s 970us/step - loss: 20.5837\n",
      "Epoch 84/100\n",
      "34/34 [==============================] - 0s 902us/step - loss: 23.5470\n",
      "Epoch 85/100\n",
      "34/34 [==============================] - 0s 897us/step - loss: 21.2774\n",
      "Epoch 86/100\n",
      "34/34 [==============================] - 0s 941us/step - loss: 19.8164\n",
      "Epoch 87/100\n",
      "34/34 [==============================] - 0s 902us/step - loss: 20.0342\n",
      "Epoch 88/100\n",
      "34/34 [==============================] - 0s 904us/step - loss: 19.4106\n",
      "Epoch 89/100\n",
      "34/34 [==============================] - 0s 872us/step - loss: 19.6316\n",
      "Epoch 90/100\n",
      "34/34 [==============================] - 0s 872us/step - loss: 19.8836\n",
      "Epoch 91/100\n",
      "34/34 [==============================] - 0s 952us/step - loss: 20.7496\n",
      "Epoch 92/100\n",
      "34/34 [==============================] - 0s 817us/step - loss: 19.5570\n",
      "Epoch 93/100\n",
      "34/34 [==============================] - 0s 940us/step - loss: 22.5917\n",
      "Epoch 94/100\n",
      "34/34 [==============================] - 0s 980us/step - loss: 21.4626\n",
      "Epoch 95/100\n",
      "34/34 [==============================] - 0s 968us/step - loss: 20.1689\n",
      "Epoch 96/100\n",
      "34/34 [==============================] - 0s 1ms/step - loss: 21.0609\n",
      "Epoch 97/100\n",
      "34/34 [==============================] - 0s 844us/step - loss: 19.4255\n",
      "Epoch 98/100\n",
      "34/34 [==============================] - 0s 943us/step - loss: 20.0346\n",
      "Epoch 99/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34/34 [==============================] - 0s 923us/step - loss: 18.6085\n",
      "Epoch 100/100\n",
      "34/34 [==============================] - 0s 810us/step - loss: 20.0105\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f9f2863a820>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply the processing to the whole training series\n",
    "dataset = windowed_dataset(series_train)\n",
    "\n",
    "# Save an instance of the model\n",
    "model = create_model()\n",
    "\n",
    "# Train it\n",
    "model.fit(dataset, epochs=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluating the forecast\n",
    "\n",
    "Now it is time to evaluate the performance of the forecast. For this you can use the `compute_metrics` function that you coded in the previous assignment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "def compute_metrics(true_series, forecast):\n",
    "    \n",
    "    mse = tf.keras.metrics.mean_squared_error(true_series, forecast).numpy()\n",
    "    mae = tf.keras.metrics.mean_absolute_error(true_series, forecast).numpy()\n",
    "\n",
    "    return mse, mae"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this point only the model that will perform the forecast is ready but you still need to compute the actual forecast. \n",
    "\n",
    "For this, run the cell below which uses the `generate_forecast` function to compute the forecast. This function generates the next value given a set of the previous `window_size` points for every point in the validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 388
    },
    "deletable": false,
    "editable": false,
    "id": "efhco2rYyIFF",
    "outputId": "3ee47e36-7681-4d6b-9c9c-ad73883c3fda"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def generate_forecast(series=G.SERIES, split_time=G.SPLIT_TIME, window_size=G.WINDOW_SIZE):\n",
    "    forecast = []\n",
    "    for time in range(len(series) - window_size):\n",
    "        forecast.append(model.predict(series[time:time + window_size][np.newaxis]))\n",
    "\n",
    "    forecast = forecast[split_time-window_size:]\n",
    "    results = np.array(forecast)[:, 0, 0]\n",
    "    return results\n",
    "\n",
    "\n",
    "# Save the forecast\n",
    "dnn_forecast = generate_forecast()\n",
    "\n",
    "# Plot it\n",
    "plt.figure(figsize=(10, 6))\n",
    "plot_series(time_valid, series_valid)\n",
    "plot_series(time_valid, dnn_forecast)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output:**\n",
    "\n",
    "A series similar to this one:\n",
    "\n",
    "<div>\n",
    "<img src=\"images/forecast.png\" width=\"500\"/>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse: 28.11, mae: 3.19 for forecast\n"
     ]
    }
   ],
   "source": [
    "mse, mae = compute_metrics(series_valid, dnn_forecast)\n",
    "\n",
    "print(f\"mse: {mse:.2f}, mae: {mae:.2f} for forecast\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**To pass this assignment your forecast should achieve an MSE of 30 or less.**\n",
    "\n",
    "- If your forecast didn't achieve this threshold try re-training your model with a different architecture or tweaking the optimizer's parameters.\n",
    "\n",
    "\n",
    "- If your forecast did achieve this threshold run the following cell to save your model in a HDF5 file file which will be used for grading and after doing so, submit your assigment for grading.\n",
    "\n",
    "\n",
    "- Make sure you didn't use `Lambda` layers in your model since these are incompatible with the `HDF5` format which will be used to save your model for grading.\n",
    "\n",
    "\n",
    "- This environment includes a dummy `my_model.h5` file which is just a dummy model trained for one epoch. **To replace this file with your actual model you need to run the next cell before submitting for grading.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Save your model in HDF5 format\n",
    "model.save('my_model.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Congratulations on finishing this week's assignment!**\n",
    "\n",
    "You have successfully implemented a neural network capable of forecasting time series while also learning how to leverage Tensorflow's Dataset class to process time series data!\n",
    "\n",
    "**Keep it up!**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details>\n",
    "  <summary><font size=\"2\" color=\"darkgreen\"><b>Please click here if you want to experiment with any of the non-graded code.</b></font></summary>\n",
    "    <p><i><b>Important Note: Please only do this when you've already passed the assignment to avoid problems with the autograder.</b></i>\n",
    "    <ol>\n",
    "        <li> On the notebook’s menu, click “View” > “Cell Toolbar” > “Edit Metadata”</li>\n",
    "        <li> Hit the “Edit Metadata” button next to the code cell which you want to lock/unlock</li>\n",
    "        <li> Set the attribute value for “editable” to:\n",
    "            <ul>\n",
    "                <li> “true” if you want to unlock it </li>\n",
    "                <li> “false” if you want to lock it </li>\n",
    "            </ul>\n",
    "        </li>\n",
    "        <li> On the notebook’s menu, click “View” > “Cell Toolbar” > “None” </li>\n",
    "    </ol>\n",
    "    <p> Here's a short demo of how to do the steps above: \n",
    "        <br>\n",
    "        <img src=\"https://drive.google.com/uc?export=view&id=14Xy_Mb17CZVgzVAgq7NCjMVBvSae3xO1\" align=\"center\">\n",
    "</details>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
