{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "adjustable-dragon",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from dataclasses import dataclass\n",
    "from absl import logging\n",
    "logging.set_verbosity(logging.ERROR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "everyday-mayor",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_series(time, series, format=\"-\", start=0, end=None):\n",
    "    plt.plot(time[start:end], series[start:end], format)\n",
    "    plt.xlabel(\"Time\")\n",
    "    plt.ylabel(\"Value\")\n",
    "    plt.grid(False)\n",
    "\n",
    "def trend(time, slope=0):\n",
    "    return slope * time\n",
    "\n",
    "def seasonal_pattern(season_time):\n",
    "    \"\"\"An arbitrary pattern\"\"\"\n",
    "    return np.where(season_time < 0.1,\n",
    "                    np.cos(season_time * 6 * np.pi),\n",
    "                    2 / np.exp(9 * season_time))\n",
    "\n",
    "def seasonality(time, period, amplitude=1, phase=0):\n",
    "    \"\"\"Repeats the same pattern at each period\"\"\"\n",
    "    season_time = ((time + phase) % period) / period\n",
    "    return amplitude * seasonal_pattern(season_time)\n",
    "\n",
    "def noise(time, noise_level=1, seed=None):\n",
    "    rnd = np.random.RandomState(seed)\n",
    "    return rnd.randn(len(time)) * noise_level"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "criminal-chest",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def generate_time_series():\n",
    "    # The time dimension or the x-coordinate of the time series\n",
    "    time = np.arange(4 * 365 + 1, dtype=\"float32\")\n",
    "\n",
    "    # Initial series is just a straight line with a y-intercept\n",
    "    y_intercept = 10\n",
    "    slope = 0.005\n",
    "    series = trend(time, slope) + y_intercept\n",
    "\n",
    "    # Adding seasonality\n",
    "    amplitude = 50\n",
    "    series += seasonality(time, period=365, amplitude=amplitude)\n",
    "\n",
    "    # Adding some noise\n",
    "    noise_level = 3\n",
    "    series += noise(time, noise_level, seed=51)\n",
    "    \n",
    "    return time, series\n",
    "\n",
    "\n",
    "# Save all \"global\" variables within the G class (G stands for global)\n",
    "@dataclass\n",
    "class G:\n",
    "    TIME, SERIES = generate_time_series()\n",
    "    SPLIT_TIME = 1100\n",
    "    WINDOW_SIZE = 20\n",
    "    BATCH_SIZE = 32\n",
    "    SHUFFLE_BUFFER_SIZE = 1000\n",
    "    \n",
    "\n",
    "# Plot the generated series\n",
    "plt.figure(figsize=(10, 6))\n",
    "plot_series(G.TIME, G.SERIES)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "collectible-starter",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_val_split(time, series, time_step=G.SPLIT_TIME):\n",
    "\n",
    "    time_train = time[:time_step]\n",
    "    series_train = series[:time_step]\n",
    "    time_valid = time[time_step:]\n",
    "    series_valid = series[time_step:]\n",
    "\n",
    "    return time_train, series_train, time_valid, series_valid\n",
    "\n",
    "\n",
    "# Split the dataset\n",
    "time_train, series_train, time_valid, series_valid = train_val_split(G.TIME, G.SERIES)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "intelligent-romania",
   "metadata": {},
   "outputs": [],
   "source": [
    "def windowed_dataset(series, window_size=G.WINDOW_SIZE, batch_size=G.BATCH_SIZE, shuffle_buffer=G.SHUFFLE_BUFFER_SIZE):\n",
    "    dataset = tf.data.Dataset.from_tensor_slices(series)\n",
    "    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)\n",
    "    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))\n",
    "    dataset = dataset.shuffle(shuffle_buffer)\n",
    "    dataset = dataset.map(lambda window: (window[:-1], window[-1]))\n",
    "    dataset = dataset.batch(batch_size).prefetch(1)\n",
    "    return dataset\n",
    "\n",
    "# Apply the transformation to the training set\n",
    "dataset = windowed_dataset(series_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "mobile-detroit",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_uncompiled_model():\n",
    "\n",
    "    ### START CODE HERE\n",
    "    \n",
    "    # Reset states generated by Keras\n",
    "    tf.keras.backend.clear_session()\n",
    "    \n",
    "    model = tf.keras.models.Sequential([ \n",
    "        tf.keras.layers.Lambda(lambda x: tf.expand_dims(x, axis=-1),\n",
    "                      input_shape=[None]),\n",
    "        tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences=True)),\n",
    "        tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n",
    "        tf.keras.layers.Dense(1),\n",
    "        tf.keras.layers.Lambda(lambda x: x * 100.0)\n",
    "    ]) \n",
    "    \n",
    "    ### END CODE HERE\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "rapid-sucking",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your current architecture is compatible with the windowed dataset! :)\n"
     ]
    }
   ],
   "source": [
    "# Test your uncompiled model\n",
    "uncompiled_model = create_uncompiled_model()\n",
    "\n",
    "try:\n",
    "    uncompiled_model.predict(dataset)\n",
    "except:\n",
    "    print(\"Your current architecture is incompatible with the windowed dataset, try adjusting it.\")\n",
    "else:\n",
    "    print(\"Your current architecture is compatible with the windowed dataset! :)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fluid-rates",
   "metadata": {},
   "outputs": [],
   "source": [
    "def adjust_learning_rate():\n",
    "    \n",
    "    model = create_uncompiled_model()\n",
    "    \n",
    "    lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-6 * 10**(epoch / 20))\n",
    "    \n",
    "    ### START CODE HERE\n",
    "    \n",
    "    # Select your optimizer\n",
    "    optimizer = 'adam'\n",
    "    \n",
    "    # Compile the model passing in the appropriate loss\n",
    "    model.compile(loss=tf.keras.losses.Huber(),\n",
    "                  optimizer=optimizer, \n",
    "                  metrics=[\"mae\"]) \n",
    "    \n",
    "    ### END CODE HERE\n",
    "    \n",
    "    history = model.fit(dataset, epochs=100, callbacks=[lr_schedule])\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "reflected-battery",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "34/34 [==============================] - 11s 96ms/step - loss: 23.4228 - mae: 23.9228 - lr: 1.0000e-06\n",
      "Epoch 2/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 22.3701 - mae: 22.8701 - lr: 1.1220e-06\n",
      "Epoch 3/100\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 21.1872 - mae: 21.6870 - lr: 1.2589e-06\n",
      "Epoch 4/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 19.8572 - mae: 20.3568 - lr: 1.4125e-06\n",
      "Epoch 5/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 18.3685 - mae: 18.8678 - lr: 1.5849e-06\n",
      "Epoch 6/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 16.7103 - mae: 17.2100 - lr: 1.7783e-06\n",
      "Epoch 7/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 14.8615 - mae: 15.3606 - lr: 1.9953e-06\n",
      "Epoch 8/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 12.8136 - mae: 13.3132 - lr: 2.2387e-06\n",
      "Epoch 9/100\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 10.5431 - mae: 11.0408 - lr: 2.5119e-06\n",
      "Epoch 10/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 8.1128 - mae: 8.6046 - lr: 2.8184e-06\n",
      "Epoch 11/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 6.0294 - mae: 6.5051 - lr: 3.1623e-06\n",
      "Epoch 12/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 4.9606 - mae: 5.4279 - lr: 3.5481e-06\n",
      "Epoch 13/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 4.6574 - mae: 5.1210 - lr: 3.9811e-06\n",
      "Epoch 14/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 4.5525 - mae: 5.0208 - lr: 4.4668e-06\n",
      "Epoch 15/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 4.4530 - mae: 4.9200 - lr: 5.0119e-06\n",
      "Epoch 16/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 4.3557 - mae: 4.8207 - lr: 5.6234e-06\n",
      "Epoch 17/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 4.2655 - mae: 4.7281 - lr: 6.3096e-06\n",
      "Epoch 18/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 4.1873 - mae: 4.6486 - lr: 7.0795e-06\n",
      "Epoch 19/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 4.1208 - mae: 4.5765 - lr: 7.9433e-06\n",
      "Epoch 20/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 4.0690 - mae: 4.5237 - lr: 8.9125e-06\n",
      "Epoch 21/100\n",
      "34/34 [==============================] - 3s 86ms/step - loss: 4.0323 - mae: 4.4886 - lr: 1.0000e-05\n",
      "Epoch 22/100\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 3.9980 - mae: 4.4550 - lr: 1.1220e-05\n",
      "Epoch 23/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.9542 - mae: 4.4094 - lr: 1.2589e-05\n",
      "Epoch 24/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.9206 - mae: 4.3742 - lr: 1.4125e-05\n",
      "Epoch 25/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.8674 - mae: 4.3227 - lr: 1.5849e-05\n",
      "Epoch 26/100\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 3.8278 - mae: 4.2841 - lr: 1.7783e-05\n",
      "Epoch 27/100\n",
      "34/34 [==============================] - 3s 85ms/step - loss: 3.7595 - mae: 4.2145 - lr: 1.9953e-05\n",
      "Epoch 28/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.7017 - mae: 4.1581 - lr: 2.2387e-05\n",
      "Epoch 29/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.6384 - mae: 4.0934 - lr: 2.5119e-05\n",
      "Epoch 30/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.5646 - mae: 4.0182 - lr: 2.8184e-05\n",
      "Epoch 31/100\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 3.5249 - mae: 3.9866 - lr: 3.1623e-05\n",
      "Epoch 32/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.4402 - mae: 3.8975 - lr: 3.5481e-05\n",
      "Epoch 33/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.4031 - mae: 3.8628 - lr: 3.9811e-05\n",
      "Epoch 34/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.3244 - mae: 3.7818 - lr: 4.4668e-05\n",
      "Epoch 35/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.2663 - mae: 3.7266 - lr: 5.0119e-05\n",
      "Epoch 36/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 3.2191 - mae: 3.6770 - lr: 5.6234e-05\n",
      "Epoch 37/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 3.1676 - mae: 3.6255 - lr: 6.3096e-05\n",
      "Epoch 38/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.1421 - mae: 3.6003 - lr: 7.0795e-05\n",
      "Epoch 39/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.0940 - mae: 3.5540 - lr: 7.9433e-05\n",
      "Epoch 40/100\n",
      "34/34 [==============================] - 3s 86ms/step - loss: 3.0369 - mae: 3.4987 - lr: 8.9125e-05\n",
      "Epoch 41/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.0160 - mae: 3.4766 - lr: 1.0000e-04\n",
      "Epoch 42/100\n",
      "34/34 [==============================] - 3s 85ms/step - loss: 3.0192 - mae: 3.4829 - lr: 1.1220e-04\n",
      "Epoch 43/100\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 2.9093 - mae: 3.3716 - lr: 1.2589e-04\n",
      "Epoch 44/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8985 - mae: 3.3518 - lr: 1.4125e-04\n",
      "Epoch 45/100\n",
      "34/34 [==============================] - 3s 86ms/step - loss: 2.8580 - mae: 3.3193 - lr: 1.5849e-04\n",
      "Epoch 46/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.9215 - mae: 3.3817 - lr: 1.7783e-04\n",
      "Epoch 47/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.0706 - mae: 3.5312 - lr: 1.9953e-04\n",
      "Epoch 48/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.7930 - mae: 3.2535 - lr: 2.2387e-04\n",
      "Epoch 49/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8224 - mae: 3.2865 - lr: 2.5119e-04\n",
      "Epoch 50/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.7653 - mae: 3.2231 - lr: 2.8184e-04\n",
      "Epoch 51/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.7623 - mae: 3.2218 - lr: 3.1623e-04\n",
      "Epoch 52/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.8430 - mae: 3.3065 - lr: 3.5481e-04\n",
      "Epoch 53/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 2.7592 - mae: 3.2216 - lr: 3.9811e-04\n",
      "Epoch 54/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8638 - mae: 3.3223 - lr: 4.4668e-04\n",
      "Epoch 55/100\n",
      "34/34 [==============================] - 3s 86ms/step - loss: 2.9589 - mae: 3.4258 - lr: 5.0119e-04\n",
      "Epoch 56/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.7053 - mae: 3.1679 - lr: 5.6234e-04\n",
      "Epoch 57/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.7680 - mae: 3.2293 - lr: 6.3096e-04\n",
      "Epoch 58/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.1637 - mae: 3.6298 - lr: 7.0795e-04\n",
      "Epoch 59/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.3967 - mae: 3.8648 - lr: 7.9433e-04\n",
      "Epoch 60/100\n",
      "34/34 [==============================] - 3s 86ms/step - loss: 2.9022 - mae: 3.3691 - lr: 8.9125e-04\n",
      "Epoch 61/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 3.0668 - mae: 3.5326 - lr: 0.0010\n",
      "Epoch 62/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.2059 - mae: 3.6739 - lr: 0.0011\n",
      "Epoch 63/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.6693 - mae: 3.1296 - lr: 0.0013\n",
      "Epoch 64/100\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 3.1518 - mae: 3.6192 - lr: 0.0014\n",
      "Epoch 65/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.1084 - mae: 3.5798 - lr: 0.0016\n",
      "Epoch 66/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.1400 - mae: 3.6140 - lr: 0.0018\n",
      "Epoch 67/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8185 - mae: 3.2830 - lr: 0.0020\n",
      "Epoch 68/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 2.7951 - mae: 3.2580 - lr: 0.0022\n",
      "Epoch 69/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.9990 - mae: 3.4679 - lr: 0.0025\n",
      "Epoch 70/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.6416 - mae: 3.1058 - lr: 0.0028\n",
      "Epoch 71/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.4615 - mae: 3.9350 - lr: 0.0032\n",
      "Epoch 72/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 3.6771 - mae: 4.1514 - lr: 0.0035\n",
      "Epoch 73/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.4025 - mae: 3.8737 - lr: 0.0040\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 74/100\n",
      "34/34 [==============================] - 3s 92ms/step - loss: 2.7970 - mae: 3.2638 - lr: 0.0045\n",
      "Epoch 75/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.6918 - mae: 3.1562 - lr: 0.0050\n",
      "Epoch 76/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 3.0483 - mae: 3.5192 - lr: 0.0056\n",
      "Epoch 77/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.6278 - mae: 3.0880 - lr: 0.0063\n",
      "Epoch 78/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8243 - mae: 3.2917 - lr: 0.0071\n",
      "Epoch 79/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 3.7169 - mae: 4.1896 - lr: 0.0079\n",
      "Epoch 80/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.2074 - mae: 3.6773 - lr: 0.0089\n",
      "Epoch 81/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 2.6980 - mae: 3.1607 - lr: 0.0100\n",
      "Epoch 82/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.8363 - mae: 3.2971 - lr: 0.0112\n",
      "Epoch 83/100\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 3.3078 - mae: 3.7720 - lr: 0.0126\n",
      "Epoch 84/100\n",
      "34/34 [==============================] - 3s 85ms/step - loss: 2.7750 - mae: 3.2397 - lr: 0.0141\n",
      "Epoch 85/100\n",
      "34/34 [==============================] - 3s 81ms/step - loss: 3.1802 - mae: 3.6451 - lr: 0.0158\n",
      "Epoch 86/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.2827 - mae: 3.7546 - lr: 0.0178\n",
      "Epoch 87/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.1897 - mae: 3.6579 - lr: 0.0200\n",
      "Epoch 88/100\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 3.5152 - mae: 3.9815 - lr: 0.0224\n",
      "Epoch 89/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8167 - mae: 3.2824 - lr: 0.0251\n",
      "Epoch 90/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8131 - mae: 3.2756 - lr: 0.0282\n",
      "Epoch 91/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.6206 - mae: 3.0827 - lr: 0.0316\n",
      "Epoch 92/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8426 - mae: 3.3084 - lr: 0.0355\n",
      "Epoch 93/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.8903 - mae: 3.3568 - lr: 0.0398\n",
      "Epoch 94/100\n",
      "34/34 [==============================] - 3s 86ms/step - loss: 2.6594 - mae: 3.1230 - lr: 0.0447\n",
      "Epoch 95/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.7886 - mae: 3.2515 - lr: 0.0501\n",
      "Epoch 96/100\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.3465 - mae: 3.8197 - lr: 0.0562\n",
      "Epoch 97/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.7877 - mae: 3.2503 - lr: 0.0631\n",
      "Epoch 98/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.5323 - mae: 4.0043 - lr: 0.0708\n",
      "Epoch 99/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.1460 - mae: 3.6085 - lr: 0.0794\n",
      "Epoch 100/100\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.3327 - mae: 3.7979 - lr: 0.0891\n"
     ]
    }
   ],
   "source": [
    "# Run the training with dynamic LR\n",
    "lr_history = adjust_learning_rate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "sealed-grove",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1e-06, 1.0, 0.0, 30.0)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the loss for every LR\n",
    "plt.semilogx(lr_history.history[\"lr\"], lr_history.history[\"loss\"])\n",
    "plt.axis([1e-6, 1, 0, 30])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "given-wonder",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model():\n",
    "\n",
    "    tf.random.set_seed(51)\n",
    "    \n",
    "    model = create_uncompiled_model()\n",
    "\n",
    "    ### START CODE HERE\n",
    "    # Set the learning rate\n",
    "    learning_rate = 5e-3\n",
    "\n",
    "    model.compile(loss=tf.keras.losses.Huber(),\n",
    "                  optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n",
    "                  metrics=[\"mae\"])    \n",
    "    \n",
    "    ### END CODE HERE\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "nonprofit-effects",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "34/34 [==============================] - 10s 100ms/step - loss: 15.9417 - mae: 16.4325\n",
      "Epoch 2/50\n",
      "34/34 [==============================] - 3s 93ms/step - loss: 4.2027 - mae: 4.6674\n",
      "Epoch 3/50\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 3.4934 - mae: 3.9599\n",
      "Epoch 4/50\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 3.3511 - mae: 3.8189\n",
      "Epoch 5/50\n",
      "34/34 [==============================] - 3s 82ms/step - loss: 3.2673 - mae: 3.7399\n",
      "Epoch 6/50\n",
      "34/34 [==============================] - 3s 82ms/step - loss: 2.8354 - mae: 3.2965\n",
      "Epoch 7/50\n",
      "34/34 [==============================] - 3s 79ms/step - loss: 2.8672 - mae: 3.3320\n",
      "Epoch 8/50\n",
      "34/34 [==============================] - 3s 90ms/step - loss: 2.6838 - mae: 3.1419\n",
      "Epoch 9/50\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.9247 - mae: 3.3947\n",
      "Epoch 10/50\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 3.0867 - mae: 3.5571\n",
      "Epoch 11/50\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.6931 - mae: 3.1577\n",
      "Epoch 12/50\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.6409 - mae: 3.1017\n",
      "Epoch 13/50\n",
      "34/34 [==============================] - 3s 91ms/step - loss: 2.6179 - mae: 3.0791\n",
      "Epoch 14/50\n",
      "34/34 [==============================] - 3s 89ms/step - loss: 2.6203 - mae: 3.0782\n",
      "Epoch 15/50\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.5577 - mae: 3.0186\n",
      "Epoch 16/50\n",
      "34/34 [==============================] - 3s 83ms/step - loss: 2.6016 - mae: 3.0629\n",
      "Epoch 17/50\n",
      "34/34 [==============================] - 3s 82ms/step - loss: 2.5930 - mae: 3.0544\n",
      "Epoch 18/50\n",
      "34/34 [==============================] - 3s 84ms/step - loss: 2.5184 - mae: 2.9790\n",
      "Epoch 19/50\n",
      "34/34 [==============================] - 3s 87ms/step - loss: 2.4983 - mae: 2.9593\n",
      "Epoch 20/50\n",
      "34/34 [==============================] - 3s 88ms/step - loss: 2.7209 - mae: 3.1809\n",
      "Epoch 21/50\n",
      "34/34 [==============================] - 3s 85ms/step - loss: 2.4703 - mae: 2.9340\n",
      "Epoch 22/50\n",
      "34/34 [==============================] - 3s 82ms/step - loss: 2.7139 - mae: 3.1801\n",
      "Epoch 23/50\n",
      "34/34 [==============================] - 3s 73ms/step - loss: 2.5023 - mae: 2.9589\n",
      "Epoch 24/50\n",
      "34/34 [==============================] - 3s 73ms/step - loss: 2.6108 - mae: 3.0750\n",
      "Epoch 25/50\n",
      "34/34 [==============================] - 2s 73ms/step - loss: 2.4503 - mae: 2.9132\n",
      "Epoch 26/50\n",
      "34/34 [==============================] - 2s 72ms/step - loss: 2.4277 - mae: 2.8873\n",
      "Epoch 27/50\n",
      "34/34 [==============================] - 3s 79ms/step - loss: 2.8707 - mae: 3.3393\n",
      "Epoch 28/50\n",
      "34/34 [==============================] - 3s 78ms/step - loss: 2.4197 - mae: 2.8796\n",
      "Epoch 29/50\n",
      "34/34 [==============================] - 2s 72ms/step - loss: 2.4170 - mae: 2.8754\n",
      "Epoch 30/50\n",
      "34/34 [==============================] - 3s 76ms/step - loss: 2.4233 - mae: 2.8850\n",
      "Epoch 31/50\n",
      "34/34 [==============================] - 3s 76ms/step - loss: 2.3449 - mae: 2.8052\n",
      "Epoch 32/50\n",
      "34/34 [==============================] - 3s 73ms/step - loss: 2.4103 - mae: 2.8701\n",
      "Epoch 33/50\n",
      "34/34 [==============================] - 2s 70ms/step - loss: 2.3277 - mae: 2.7836\n",
      "Epoch 34/50\n",
      "34/34 [==============================] - 2s 70ms/step - loss: 2.4066 - mae: 2.8669\n",
      "Epoch 35/50\n",
      "34/34 [==============================] - 3s 79ms/step - loss: 2.3693 - mae: 2.8314\n",
      "Epoch 36/50\n",
      "34/34 [==============================] - 3s 81ms/step - loss: 2.3868 - mae: 2.8432\n",
      "Epoch 37/50\n",
      "34/34 [==============================] - 3s 75ms/step - loss: 2.3260 - mae: 2.7818\n",
      "Epoch 38/50\n",
      "34/34 [==============================] - 3s 76ms/step - loss: 2.3275 - mae: 2.7810\n",
      "Epoch 39/50\n",
      "34/34 [==============================] - 3s 79ms/step - loss: 2.3621 - mae: 2.8234\n",
      "Epoch 40/50\n",
      "34/34 [==============================] - 3s 76ms/step - loss: 2.3594 - mae: 2.8197\n",
      "Epoch 41/50\n",
      "34/34 [==============================] - 3s 73ms/step - loss: 2.3446 - mae: 2.8068\n",
      "Epoch 42/50\n",
      "34/34 [==============================] - 3s 76ms/step - loss: 2.3673 - mae: 2.8281\n",
      "Epoch 43/50\n",
      "34/34 [==============================] - 3s 76ms/step - loss: 2.2769 - mae: 2.7314\n",
      "Epoch 44/50\n",
      "34/34 [==============================] - 3s 73ms/step - loss: 2.5165 - mae: 2.9815\n",
      "Epoch 45/50\n",
      "34/34 [==============================] - 3s 76ms/step - loss: 2.4145 - mae: 2.8714\n",
      "Epoch 46/50\n",
      "34/34 [==============================] - 3s 84ms/step - loss: 2.2402 - mae: 2.6996\n",
      "Epoch 47/50\n",
      "34/34 [==============================] - 3s 82ms/step - loss: 2.4013 - mae: 2.8567\n",
      "Epoch 48/50\n",
      "34/34 [==============================] - 3s 85ms/step - loss: 2.4436 - mae: 2.9068\n",
      "Epoch 49/50\n",
      "34/34 [==============================] - 3s 83ms/step - loss: 2.2256 - mae: 2.6784\n",
      "Epoch 50/50\n",
      "34/34 [==============================] - 3s 85ms/step - loss: 2.2694 - mae: 2.7275\n"
     ]
    }
   ],
   "source": [
    "# Save an instance of the model\n",
    "model = create_model()\n",
    "\n",
    "# Train it\n",
    "history = model.fit(dataset, epochs=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "confident-rings",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_metrics(true_series, forecast):\n",
    "    \n",
    "    mse = tf.keras.metrics.mean_squared_error(true_series, forecast).numpy()\n",
    "    mae = tf.keras.metrics.mean_absolute_error(true_series, forecast).numpy()\n",
    "\n",
    "    return mse, mae"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "preliminary-thinking",
   "metadata": {},
   "outputs": [],
   "source": [
    "def model_forecast(model, series, window_size):\n",
    "    ds = tf.data.Dataset.from_tensor_slices(series)\n",
    "    ds = ds.window(window_size, shift=1, drop_remainder=True)\n",
    "    ds = ds.flat_map(lambda w: w.batch(window_size))\n",
    "    ds = ds.batch(32).prefetch(1)\n",
    "    forecast = model.predict(ds)\n",
    "    return forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "serial-stevens",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute the forecast for all the series\n",
    "rnn_forecast = model_forecast(model, G.SERIES, G.WINDOW_SIZE).squeeze()\n",
    "\n",
    "# Slice the forecast to get only the predictions for the validation set\n",
    "rnn_forecast = rnn_forecast[G.SPLIT_TIME - G.WINDOW_SIZE:-1]\n",
    "\n",
    "# Plot it\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "plot_series(time_valid, series_valid)\n",
    "plot_series(time_valid, rnn_forecast)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "drawn-amazon",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse: 27.23, mae: 3.01 for forecast\n"
     ]
    }
   ],
   "source": [
    "mse, mae = compute_metrics(series_valid, rnn_forecast)\n",
    "\n",
    "print(f\"mse: {mse:.2f}, mae: {mae:.2f} for forecast\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "overall-amino",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: saved_model/my_model/assets\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: saved_model/my_model/assets\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saved_model/\n",
      "saved_model/my_model/\n",
      "saved_model/my_model/keras_metadata.pb\n",
      "saved_model/my_model/variables/\n",
      "saved_model/my_model/variables/variables.data-00000-of-00001\n",
      "saved_model/my_model/variables/variables.index\n",
      "saved_model/my_model/saved_model.pb\n",
      "saved_model/my_model/assets/\n"
     ]
    }
   ],
   "source": [
    "# Save your model in the SavedModel format\n",
    "model.save('saved_model/my_model')\n",
    "\n",
    "# Compress the directory using tar\n",
    "! tar -czvf saved_model.tar.gz saved_model/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "color-tribune",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
